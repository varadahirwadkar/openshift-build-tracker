pipeline {
    agent any

    parameters {
        string(defaultValue: 'default', description: 'Latest builds release', name: 'release_builds')
    }

    stages {
      
        stage('pull artifacts') {
            steps {
                script {
                    step([  $class: 'CopyArtifact',
                    filter: "*.txt",
                    fingerprintArtifacts: true,
                    projectName: currentBuild.projectName,
                    target: 'artifactory',
                    selector: lastSuccessful()
                    ])
                }
            }
        }
        stage('First time initialization of Job') {
            when { expression { return "${params.release_builds}" != "default" ; } }
            steps {
                script {
                    env.SKIP_POST_INIT = "true"

                    def release_builds_list = params.release_builds.split(',')
                      for (int i=0; i<release_builds_list.size();i++) {
                        println release_builds_list[i]
                    }
                    for (int i=0; i<release_builds_list.size();i++) {
                    release = release_builds_list[i].split('\\.[0-9]{1,2}$')[0]
                    release_version = release_builds_list[i].split('\\.')[-1]
                    if (release != ""){
                        sh "python3 hack/read_quay.py ${release} ${release_version} "
                        
                        OCP_NEW_BUILD = "quay.io/openshift-release-dev/ocp-release:${release_builds_list[i]}-ppc64le"
                    
                        echo "Default New Build is ${OCP_NEW_BUILD}"
                        build job: 'varad_remote_trigger', wait: false,parameters: [
                            string(name: 'Release', value: "${release}"),
                            string(name: 'Build', value: "${OCP_NEW_BUILD}"),
                            string(name: 'KeepFor', value: "20")
                        ]
                        sleep 5

                        }
                    }
                       
                }
            }
        }

        
        stage('Execute python script and Trigger new builds') {
           when { expression { return env.SKIP_POST_INIT != "true"; } }
            steps {
                script {
                    
                    release = "4.6"

                    // Cheking for newer builds of the releases
                    while(fileExists("artifactory/${release}-latest-build.txt")){

                        OCP_LAST_BUILD = readFile "artifactory/${release}-latest-build.txt"
                        OCP_LAST_BUILD = OCP_LAST_BUILD.trim()

                        echo "Older build is: ${OCP_LAST_BUILD}"
                        echo "Checking newer build for:  ${release}"
                        sh "python3 hack/read_quay.py ${release} 0"
                        
                        OCP_NEW_BUILD = readFile "${release}-latest-build.txt"
                        OCP_NEW_BUILD = OCP_NEW_BUILD.trim()
                        
                        if(OCP_NEW_BUILD != ""){
                            if (OCP_LAST_BUILD != OCP_NEW_BUILD){
                                //echo "Triggering Builds for ${OCP_NEW_BUILD}"
                                
                                OCP_NEW_BUILD = "quay.io/openshift-release-dev/ocp-release:${OCP_NEW_BUILD}"
                                echo "New Build is ${OCP_NEW_BUILD}"
                                build job: 'varad_remote_trigger', wait: false,parameters: [
                                    string(name: 'Release', value: "${release}"),
                                    string(name: 'Build', value: "${OCP_NEW_BUILD}"),
                                    string(name: 'KeepFor', value: "20")
                                ]
                                sleep 5
                            }
                        }

                        release_number    = release.split('\\.')
                        release_number[1] = (release_number[1].toInteger() + 1).toString()
                        release           = release_number[0] + '.' + release_number[1]
                    }
                
                    //Checking for next major release
                    echo "Checking newer build for:  ${release}"
                    sh "python3 hack/read_quay.py ${release} 0"

                    //If next major release exists trigger the jobs
                    if (fileExists("${release}-latest-build.txt")) {
                        OCP_NEW_BUILD = readFile "${release}-latest-build.txt"
                        OCP_NEW_BUILD = OCP_NEW_BUILD.trim()
                        if(OCP_NEW_BUILD != ""){
                            echo "Triggering Builds for ${release}"
                           
                            OCP_NEW_BUILD = "quay.io/openshift-release-dev/ocp-release:${OCP_NEW_BUILD}"
                            echo "New Build is ${OCP_NEW_BUILD}"
                            build job: 'varad_remote_trigger', wait: false,parameters: [
                                string(name: 'Release', value: "${release}"),
                                string(name: 'Build', value: "${OCP_NEW_BUILD}"),
                                string(name: 'KeepFor', value: "20")
                            ]       
                            sleep 5
                        } 
                    }
                }            
            }
        }  
    }

    post {
        always {
            archiveArtifacts allowEmptyArchive: true, artifacts: '4.6-latest-build.txt', fingerprint: true, onlyIfSuccessful: false
            archiveArtifacts allowEmptyArchive: true, artifacts: '4.7-latest-build.txt', fingerprint: true, onlyIfSuccessful: false
            archiveArtifacts allowEmptyArchive: true, artifacts: '4.8-latest-build.txt', fingerprint: true, onlyIfSuccessful: false
            archiveArtifacts allowEmptyArchive: true, artifacts: '4.9-latest-build.txt', fingerprint: true, onlyIfSuccessful: false
            archiveArtifacts allowEmptyArchive: true, artifacts: '4.10-latest-build.txt', fingerprint: true, onlyIfSuccessful: false

            archiveArtifacts allowEmptyArchive: true, artifacts: '4.6-stable-build.txt', fingerprint: true, onlyIfSuccessful: false
            archiveArtifacts allowEmptyArchive: true, artifacts: '4.7-stable-build.txt', fingerprint: true, onlyIfSuccessful: false
            archiveArtifacts allowEmptyArchive: true, artifacts: '4.8-stable-build.txt', fingerprint: true, onlyIfSuccessful: false
            archiveArtifacts allowEmptyArchive: true, artifacts: '4.9-stable-build.txt', fingerprint: true, onlyIfSuccessful: false
            archiveArtifacts allowEmptyArchive: true, artifacts: '4.10-stable-build.txt', fingerprint: true, onlyIfSuccessful: false


        }    
    }
}
